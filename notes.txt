Lecture 1A: Overview and Introduction to Lisp

Computer science is about managin complexity of complex systems. We manage complexity through prodedure, a pattern of rules, implemented in programming languages to talk about imperative knowledge, how to do things. Three techniques of managing complexity are blackbox abstraction, conventional inference, and metalinguistic abstraction. The last one is creation of programming language to expose or hide complexity. A framework for understanding programming languages are to ask three questions. What are the primitives? How do we combine primitives? How do we add abstraction?

-----------------------------------------------------------------------------------------------------

Lecture 1B: Procedures and Processes; Substitution Model

Part of being a computer scientist is to understand the relationships between procedures/rules and the shape of the process that comes from invoking them. Examples classification of the shape of the algorithm are iteration, recursive, and exponential. The substitution model was introduced to help evaluate the relationship between procedures and shapes. A programmers intuition can be trained to evaluate this relationship.

One quote that resonated with me strongly is this idea:
"The key to understanding complicated things is to understand what details to avoid."

-----------------------------------------------------------------------------------------------------

Lecture 2A: Higher-order Procedures

Higher order procedures allow a programmer to share ideas across different abstractions. This is nice because it allows for a couple things. It improves human understanding of how a program works and makes it easier to write and read code. It also allows a change in the implementation of an idea with minimal re-work in the rest of the application. A higher order function means that procedures are first class citizens in a language.

-----------------------------------------------------------------------------------------------------

Lecture 2B: Compound Data

One technique for managing complex data is to use compound data structures and data abstraction. The programmer uses compound data to better express their ideas in a programming language. This allows the programmer to make implementation decisions but not be bound/coupled tightly to those decisions. Further, it allows the programmer the ability to put off on deciding on a specific implementation as long as a contract is in place about what the abstraction represents and it's access and builder methods. When designing with data abstraction in mind, wishful thinking is often a very powerful tool to develop complex systems. The line between what is considered data and what is considered a procedure may be a very blurry line. It is possible that compound data may actually be implemented as combinations of higher order procedures.
